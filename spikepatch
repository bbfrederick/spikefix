#!/usr/bin/env python
#
#       $Author: frederic $
#       $Date: 2016/09/22 15:33:04 $
#       $Id: spikepatch,v 1.7 2016/09/22 15:33:04 frederic Exp $
#
from __future__ import print_function
import subprocess
import glob
import argparse

import re


def is_float(parser, arg):
    """
    Check if argument is float or auto.
    """
    if arg != "auto":
        try:
            arg = float(arg)
        except parser.error:
            parser.error('Value {0} is not a float or "auto"'.format(arg))

    return arg


def is_int(parser, arg):
    """
    Check if argument is int or auto.
    """
    if arg != "auto":
        try:
            arg = int(arg)
        except parser.error:
            parser.error('Value {0} is not an int or "auto"'.format(arg))

    return arg


def _get_parser():
    parser = argparse.ArgumentParser(prog='spikepatch',
                                     description='Fixes spikes in fmri data.',
                                     usage='%(prog)s inputfile outputfile spikelocs')

    parser.add_argument(
        'inputfilename',
        type=str,
        help='The name of the raw 4D data file')
    parser.add_argument(
        'outputfilename',
        type=str,
        help='The name of the despiked output file')
    parser.add_argument(
        'spikefilename',
        type=str,
        help=('Text file listing the indices of the bad points (first point is 0), '
              'e.g. the XXX_locs.txt output of spikecheck'))

    return parser


def grep(pattern, linelist):
    r = []
    linenumber = 0
    for thisline in linelist:
        linenumber += 1
        if re.search(pattern, thisline):
            r.append((linenumber, thisline))
    return r


def getniftihdritem(theniftifile, item):
    matchinglines = grep(item,
                         subprocess.check_output(['fslhd', theniftifile]).decode("latin-1").split('\n'))
    for thisline in matchinglines:
        splitline = thisline[1].split()
        if splitline[0] == item:
            return splitline[1]
    return None


def getlowervalid(theindex, thespikearray):
    if theindex == 0:
        if thespikearray[theindex] == 0:
            return -1
        else:
            return thespikearray[theindex] - 1
    if thespikearray[theindex] - thespikearray[theindex - 1] == 1:
        return getlowervalid(theindex - 1, thespikearray)
    else:
        return thespikearray[theindex] - 1


def getuppervalid(theindex, thespikearray, theupperlim):
    if theindex == len(thespikearray) - 1:
        if thespikearray[theindex] == theupperlim:
            return -1
        else:
            return thespikearray[theindex] + 1
    if thespikearray[theindex + 1] - thespikearray[theindex] == 1:
        return getuppervalid(theindex + 1, thespikearray, theupperlim)
    else:
        return thespikearray[theindex] + 1


def main():
    try:
        args = _get_parser().parse_args()
    except SystemExit:
        _get_parser().print_help()
        raise

    limret = int(getniftihdritem(args.inputfilename, 'dim4'))
    print('spike patching file with ', limret, ' volumes')
    upperlim = int(limret) - 1

    spikearray = []
    uppersource = []
    lowersource = []
    spikefile = open(args.spikefilename)
    for line in spikefile:
        spikearray.append(int(line))
        uppersource.append(int(0))
        lowersource.append(int(0))
    numspikes = len(spikearray)

    for i in range(0, numspikes):
        lowersource[i] = getlowervalid(i, spikearray)
        uppersource[i] = getuppervalid(i, spikearray, upperlim)
        print("spike: ", i, ", loc=", spikearray[i], ", sources=", lowersource[i], ",", uppersource[i])

    print('calling mcflirt')
    subprocess.call(['mcflirt', '-in', args.inputfilename])
    print('generating patchvols')
    subprocess.call(['fslsplit', args.inputfilename, 'patchvols_', '-t'])
    print('generating mcvols')
    subprocess.call(['fslsplit', args.inputfilename + '_mcf', 'mcvols_', '-t'])
    for i in range(0, numspikes):
        if lowersource[i] == -1:
            # extrapolate to beginning
            print("replacing volume " + str(spikearray[i]).zfill(4),
                  " with " + str(uppersource[i]).zfill(4) + " (extrapolate to beginning)")
            subprocess.call(
                ['cp',
                 'mcvols_' + str(uppersource[i]).zfill(4) + '.nii.gz',
                 'patchvols_' + str(spikearray[i]).zfill(4) + '.nii.gz'])
        else:
            if uppersource[i] == -1:
                # extrapolate to end
                print("replacing volume " + str(spikearray[i]).zfill(4),
                      " with " + str(lowersource[i]).zfill(4) + " (extrapolate to end)")
                subprocess.call(
                    ['cp',
                     'mcvols_' + str(lowersource[i]).zfill(4) + '.nii.gz',
                     'patchvols_' + str(spikearray[i]).zfill(4) + '.nii.gz'])
            else:
                # interpolate between endpoints
                therange = uppersource[i] - lowersource[i]
                distance1 = spikearray[i] - lowersource[i]
                factor1 = (1.0 * distance1) / therange
                factor2 = 1.0 - factor1
                print(therange, distance1, factor1, factor2)
                print("replacing volume " + str(spikearray[i]).zfill(4),
                      " with interpolation from " + str(lowersource[i]).zfill(4),
                      " to " + str(uppersource[i]).zfill(4))
                subprocess.call(['fslmaths',
                                 'mcvols_' + str(lowersource[i]).zfill(4),
                                 '-mul', str(factor1),
                                 'temp1'])
                subprocess.call(['fslmaths',
                                 'mcvols_' + str(uppersource[i]).zfill(4),
                                 '-mul', str(factor2),
                                 '-add',
                                 'temp1',
                                 'patchvols_' + str(spikearray[i]).zfill(4)])
                subprocess.call(['rm',
                                 'temp1.nii.gz'])

    patchvollist = glob.glob('patchvols_*.nii.gz')
    mcvollist = glob.glob('mcvols_*.nii.gz')

    mergecommand = ['fslmerge', '-t', args.outputfilename]
    mergecommand.extend(patchvollist)
    subprocess.call(mergecommand)

    rmcmd = ['rm', args.inputfilename + '_mcf.nii.gz']
    rmcmd.extend(patchvollist)
    rmcmd.extend(mcvollist)

    #subprocess.call(rmcmd)


if __name__ == "__main__":
    main()

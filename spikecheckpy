#!/usr/bin/env python
#
#       $Author: frederic $
#       $Date: 2016/09/22 15:33:04 $
#       $Id: spikepatch,v 1.7 2016/09/22 15:33:04 frederic Exp $
#
from __future__ import print_function
import sys
import time
import subprocess
import glob
import argparse
 
import re

defaultpercentthresh = 3.0
defaultnumvoxels = 150

def is_float(parser, arg):
    """
    Check if argument is float or auto.
    """
    if arg != "auto":
        try:
            arg = float(arg)
        except parser.error:
            parser.error('Value {0} is not a float or "auto"'.format(arg))

    return arg


def is_int(parser, arg):
    """
    Check if argument is int or auto.
    """
    if arg != "auto":
        try:
            arg = int(arg)
        except parser.error:
            parser.error('Value {0} is not an int or "auto"'.format(arg))

    return arg


def _get_parser():
    parser = argparse.ArgumentParser(prog='spikecheck',
                                     description='Finds spikes in fmri data.',
                                     usage='%(prog)s texfilename[:col1,col2...,coln] [textfilename]... [options]')

    parser.add_argument('inputfilename',
                        type=str,
                        help='The name of the 4D file to check for spikes')
    parser.add_argument('outputfileroot',
                        type=str,
                        help='The base of all output filenames')
    parser.add_argument(
        '--percentthresh',
        dest='percentthresh',
        action='store',
        metavar='PCT',
        type=lambda x: is_float(parser, x),
        help=(
            'The percentage difference of a timepoint from it\'s ',
            'mean to be flagged (default is' + str(defaultpercentthresh) + '). '
            'NOTE: if percentthresh '
            'is negative, use its absolute value, but mask the image first.'
            ),
        default=defaultpercentthresh)
    parser.add_argument(
        '--numvoxthresh',
        dest='numvoxthresh',
        action='store',
        metavar='NUM',
        type=lambda x: is_int(parser, x),
        help=(
            'The number of voxels passing percentthresh at a timepoint '
            'to constitute a  spike (default=150).'),
        default=150)

    return parser


def grep(pattern,linelist):
    r=[]
    linenumber=0
    for line in linelist:
        linenumber +=1
        if re.search(pattern,line):
            r.append((linenumber,line))
    return r


def getniftihdritem(thefilename, item):
    matchinglines = grep(item, subprocess.check_output(['fslhd', thefilename]).decode("latin-1").split('\n'))
    for line in matchinglines:
        splitline = line[1].split()
        if(splitline[0] == item):
            return splitline[1]
    return None


# read in the datafile
def main():
    try:
        args = _get_parser().parse_args()
    except SystemExit:
        _get_parser().print_help()
        raise
    print(args)

    abspercentthresh = abs(args.percentthresh)
    sgnpercentthresh = args.percentthresh / abspercentthresh

    print("using threshold percentage of ", abspercentthresh, ", voxel threshold ", args.numvoxthresh)
    subprocess.call(['fslmaths',
                     args.inputfilename,
                     '-Tmean',
                     'immean',
                     '-odt',
                     'float'])
    statscmd = ['fslstats', 'immean', '-r']
    statscmdresult = subprocess.check_output(statscmd).decode("latin-1").split('\n')[0].split()[1]
    thresh = float(statscmdresult) / 20.0
    print('thresh:', thresh)
    subprocess.call(['fslmaths',
                     'immean',
                     '-thr', str(thresh),
                     '-bin',
                     'immask',
                     '-odt', 'float'])

    xsize = getniftihdritem('immean', 'dim1')
    ysize = getniftihdritem('immean', 'dim2')
    zsize = getniftihdritem('immean', 'dim3')
    print(xsize, ysize, zsize)

    if sgnpercentthresh > 0:
        print('not masking')
        subprocess.call([
            'fslmaths',
            args.inputfilename,
            '-div', 'immean',
            '-sub', '1',
            '-nan',
            '-abs',
            '-thr', str(abspercentthresh),
            '-bin',
            '-mul', str(xsize),
            '-mul', str(ysize),
            '-mul', str(zsize),
            args.outputfileroot + '_map',
            '-odt', 'int'])
    else:
        print('masking')
        subprocess.call([
            'fslmaths',
            args.inputfilename,
            '-div', 'immean',
            '-sub', '1',
            '-nan',
            '-abs',
            '-mul', 'immask',
            '-thr', str(abspercentthresh),
            '-bin',
            '-mul', str(xsize),
            '-mul', str(ysize),
            '-mul', str(zsize),
            args.outputfileroot + '_map',
            '-odt', 'int'])

    '''fslmeants -i $2'_map' -o $2'_tc.txt'
    cat $2'_tc.txt' | awk '{ if($1>'$numvoxthresh') print NR-1}' > $2'_locs.txt'
    set numspikes = `cat $2'_locs.txt' | wc | awk '{print $1}'`
    cat $2'_tc.txt' | awk '{ if($1>'$numvoxthresh') print "1"; else print "0" }' > $2'_loctc.txt'
    echo $numspikes " spikes found"'''

if __name__ == "__main__":
    main()

#!/usr/bin/env python
#
#       $Author: frederic $
#       $Date: 2016/09/22 15:33:04 $
#       $Id: spikepatch,v 1.7 2016/09/22 15:33:04 frederic Exp $
#
from __future__ import print_function

import argparse
import os
import re
import subprocess
import sys

defaultpercentthresh = 3.0
defaultnumvoxels = 150


def is_valid_file(parser, arg):
    """
    Check if argument is existing file.
    """
    thefilename = arg

    if not os.path.isfile(thefilename) and thefilename is not None:
        parser.error("The file {0} does not exist!".format(thefilename))

    return arg


def is_float(parser, arg):
    """
    Check if argument is float or auto.
    """
    if arg != "auto":
        try:
            arg = float(arg)
        except parser.error:
            parser.error('Value {0} is not a float or "auto"'.format(arg))

    return arg


def is_int(parser, arg):
    """
    Check if argument is int or auto.
    """
    if arg != "auto":
        try:
            arg = int(arg)
        except parser.error:
            parser.error('Value {0} is not an int or "auto"'.format(arg))

    return arg


def _get_parser():
    parser = argparse.ArgumentParser(
        prog="spikecheck",
        description="Finds spikes in fmri data.",
    )

    parser.add_argument(
        "inputfilename", type=str, help="The name of the 4D file to check for spikes"
    )
    parser.add_argument(
        "outputfileroot", type=str, help="The base of all output filenames"
    )
    parser.add_argument(
        "--percentthresh",
        dest="percentthresh",
        action="store",
        metavar="PCT",
        type=lambda x: is_float(parser, x),
        help=(
            "The percentage difference of a timepoint from the "
            "mean to be flagged (default is " + str(defaultpercentthresh) + "). "
            "NOTE: if percentthresh is negative, use its absolute value, but mask the image first."
        ),
        default=defaultpercentthresh,
    )
    parser.add_argument(
        "--numvoxthresh",
        dest="numvoxthresh",
        action="store",
        metavar="NUM",
        type=lambda x: is_int(parser, x),
        help=(
            "The number of voxels passing percentthresh at a timepoint "
            "to constitute a  spike (default is " + str(defaultnumvoxels) + ")."
        ),
        default=150,
    )
    parser.add_argument(
        "--maskfile",
        dest="maskfile",
        action="store",
        metavar="FILE",
        type=lambda x: is_valid_file(parser, x),
        help=(
            "Mask file to limit voxels used to find spikes. If no mask is provided, one will be generated."
        ),
        default=None,
    )
    parser.add_argument(
        "--estimatepctthresh",
        dest="estimatepctthresh",
        action="store_true",
        help=("Estimate the percentage threshold."),
        default=False,
    )
    """parser.add_argument(
        "--estimatenumvoxthresh",
        dest="estimatenumvoxthresh",
        action="store_true",
        help=("Estimate the number of voxels threshold."),
        default=False,
    )"""
    parser.add_argument(
        "--nomask",
        dest="usemask",
        action="store_false",
        help=("Do not mask the image."),
        default=True,
    )
    parser.add_argument(
        "--debug",
        dest="debug",
        action="store_true",
        help=("Print more extensive debugging information."),
        default=False,
    )

    return parser


def grep(pattern, linelist):
    r = []
    linenumber = 0
    for line in linelist:
        linenumber += 1
        if re.search(pattern, line):
            r.append((linenumber, line))
    return r


def getniftihdritem(theniftifile, item, FSLBINDIR):
    matchinglines = grep(
        item,
        subprocess.check_output([os.path.join(FSLBINDIR, "fslhd"), theniftifile])
        .decode("latin-1")
        .split("\n"),
    )
    for thisline in matchinglines:
        splitline = thisline[1].split()
        if splitline[0] == item:
            return splitline[1]
    return None


# read in the datafile
def main():
    try:
        args = _get_parser().parse_args()
    except SystemExit:
        _get_parser().print_help()
        raise

    # check for FSL
    FSLDIR = os.environ.get("FSLDIR")
    if FSLDIR is None:
        print("cannot find FSL - quitting")
        sys.exit()
    else:
        print("FSL found at", FSLDIR)
    FSLBINDIR = os.path.join(FSLDIR, "bin")

    # first make the mean file
    subprocess.call(
        [
            os.path.join(FSLBINDIR, "fslmaths"),
            args.inputfilename,
            "-Tmean",
            "immean",
            "-odt",
            "float",
        ]
    )

    # load or generate a mask
    if args.usemask:
        if args.maskfile is None:
            statscmd = [os.path.join(FSLBINDIR, "fslstats"), "immean", "-r"]
            statscmdresult = (
                subprocess.check_output(statscmd)
                .decode("latin-1")
                .split("\n")[0]
                .split()[1]
            )
            thresh = float(statscmdresult) / 20.0
            print("thresh:", thresh)
            subprocess.call(
                [
                    os.path.join(FSLBINDIR, "fslmaths"),
                    "immean",
                    "-thr",
                    str(thresh),
                    "-bin",
                    "immask",
                    "-odt",
                    "float",
                ]
            )
        else:
            subprocess.call(
                [
                    "cp",
                    args.maskfile,
                    "immask.nii.gz",
                ]
            )
    else:
        subprocess.call(
            [
                os.path.join(FSLBINDIR, "fslmaths"),
                "immean",
                "-mul",
                "0.0",
                "-add",
                "1.0",
                "-odt",
                "float",
            ]
        )

    # estimate the percentage threshold using the MAD, if requested
    if args.estimatepctthresh:
        print("estimating percentage threshold")
        subprocess.call(
            [
                os.path.join(FSLBINDIR, "fslmaths"),
                args.inputfilename,
                "-div",
                "immean",
                "-sub",
                "1.0",
                "-nan",
                "-mul",
                "immask",
                "imnorm",
                "-odt",
                "float",
            ]
        )
        subprocess.call(
            [
                os.path.join(FSLBINDIR, "fslmaths"),
                "imnorm",
                "-Tmedian",
                "immedianovertime",
                "-odt",
                "float",
            ]
        )
        subprocess.call(
            [
                os.path.join(FSLBINDIR, "fslmaths"),
                "imnorm",
                "-sub",
                "immedianovertime",
                "imdiff",
                "-odt",
                "float",
            ]
        )
        subprocess.call(
            [
                os.path.join(FSLBINDIR, "fslmaths"),
                "imdiff",
                "-abs",
                "-Tmedian",
                "-mul",
                "100.0",
                "imMADpct",
                "-odt",
                "float",
            ]
        )
        statscmd = [
            os.path.join(FSLBINDIR, "fslstats"),
            "imMADpct",
            "-k",
            "immask",
            "-P",
            "50",
        ]
        meanMAD = float(
            subprocess.check_output(statscmd)
            .decode("latin-1")
            .split("\n")[0]
            .split()[0]
        )
        estimatedthresh = 3.0 * 1.4826 * meanMAD  # roughly 3 sigma
        args.percentthresh = estimatedthresh

        rmcmd = [
            "rm",
            "imMADpct.nii.gz",
            "imdiff.nii.gz",
            "imnorm.nii.gz",
            "immedianovertime.nii.gz",
        ]
        if not args.debug:
            subprocess.call(rmcmd)

    abspercentthresh = abs(args.percentthresh)
    sgnpercentthresh = args.percentthresh / abspercentthresh

    print(
        "using threshold percentage of ",
        abspercentthresh,
        ", voxel threshold ",
        args.numvoxthresh,
    )
    xsize = int(getniftihdritem("immean", "dim1", FSLBINDIR))
    ysize = int(getniftihdritem("immean", "dim2", FSLBINDIR))
    zsize = int(getniftihdritem("immean", "dim3", FSLBINDIR))
    print(xsize, ysize, zsize)

    # make a map of absolute percent deviations from the mean
    subprocess.call(
        [
            os.path.join(FSLBINDIR, "fslmaths"),
            args.inputfilename,
            "-div",
            "immean",
            "-sub",
            "1",
            "-nan",
            "-abs",
            "-mul",
            "100.0",
            "abspctdev",
            "-odt",
            "float",
        ]
    )

    # mask if we're going to
    if args.usemask:
        print("masking")
        subprocess.call(
            [
                os.path.join(FSLBINDIR, "fslmaths"),
                "abspctdev",
                "-mul",
                "immask",
                "abspctdev",
                "-odt",
                "float",
            ]
        )
    else:
        print("not masking")

    # now make the binary map of voxels that exceed threshold
    subprocess.call(
        [
            os.path.join(FSLBINDIR, "fslmaths"),
            "abspctdev",
            "-thr",
            str(abspercentthresh),
            "-bin",
            args.outputfileroot + "_map",
            "-odt",
            "int",
        ]
    )

    subprocess.call(
        [
            os.path.join(FSLBINDIR, "fslmeants"),
            "-i",
            args.outputfileroot + "_map",
            "-o",
            args.outputfileroot + "_tc.txt",
        ]
    )

    with open(args.outputfileroot + "_tc.txt", "r") as infile:
        read_data = infile.read().split("\n")

    numlines = len(read_data) - 1

    outlist = []
    loctclist = []
    multiplier = float(xsize * ysize * zsize)
    print("multiplier:", multiplier)
    for idx in range(numlines):
        read_data[idx] = float(read_data[idx].strip())
        print(idx, read_data[idx], read_data[idx] * multiplier)
        print(idx, read_data[idx])
        if int(read_data[idx]) > args.numvoxthresh:
            outlist.append(str(idx) + "\n")
            print("threshhold exceeded")
            loctclist.append("1\n")
        else:
            loctclist.append("0\n")

    with open(args.outputfileroot + "_newtc.txt", "w") as outfile:
        outfile.writelines(read_data)
    with open(args.outputfileroot + "_locs.txt", "w") as outfile:
        outfile.writelines(outlist)
    with open(args.outputfileroot + "_loctc.txt", "w") as outfile:
        outfile.writelines(loctclist)

    rmcmd = ["rm", "immask.nii.gz", "immean.nii.gz"]
    if not args.debug:
        subprocess.call(rmcmd)

    print(len(outlist), "spikes found")


if __name__ == "__main__":
    main()
